name: CI/CD Pipeline

on:
  push:
    branches:
      - work/final-work_9

jobs:
  ci:
    name: 🔍 Run Tests and Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install flake8 psycopg[binary]
          pip install -r requirements.txt

      - name: Run linter (flake8)
        run: |
          flake8 . --exclude=env,migrations,__pycache__

      - name: 🧪 Запустить тесты
        run: |
          python manage.py test --settings=config.settings
        env:
          SECRET_KEY: dummykey
          DEBUG: "False"
          DB_NAME: habitflow_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          TELEGRAM_BOT_TOKEN: test_token
          CELERY_BROKER_URL: redis://localhost:6379/0
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: habitflow_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
       image: redis:7
       ports:
         - 6379:6379

  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          docker build --target backend -t myapp-backend:latest .

      - name: Build celery image
        run: |
          docker build --target celery -t myapp-celery:latest .

  deploy:
    name: 🚀 Deploy to Production Server
    runs-on: ubuntu-latest
    needs: [ci, build]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure SSH Agent
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🖥️ Deploy via SSH
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Перейти в домашнюю папку
            cd /home/${{ secrets.SSH_USERNAME }} || exit

            # Создать папку habitflow и клонировать репозиторий, если нужно
            if [ ! -d "habitflow" ]; then
              echo "📁 Папка habitflow не найдена. Клонирую репозиторий..."
              git clone https://github.com/oksanafedorova07/HabitFlow.git habitflow
            fi

            cd habitflow || exit

            # Убедиться, что нужная ветка существует
            git fetch origin work/final-work_9

            # Переключиться на ветку и обновиться
            git checkout work/final-work_9
            git pull origin work/final-work_9

            # Обновить .env из секретов
            cat > .env << EOF
            DEBUG=${{ secrets.DEBUG }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            DB_HOST=db
            DB_NAME=habitflow_db
            DB_USER=postgres
            REDIS_URL=redis://redis:6379/0
            CELERY_BROKER_URL=redis://redis:6379/0
            EOF

            # Перезапустить сервисы
            echo "🔄 Останавливаю контейнеры..."
            docker-compose down

            echo "🏗️ Пересобираю и запускаю контейнеры..."
            docker-compose up -d --build

            # Применить миграции
            echo "🗄️ Применяю миграции..."
            docker-compose run --rm backend python manage.py migrate --noinput

            # Собрать статику
            echo "📦 Собираю статику..."
            docker-compose run --rm backend python manage.py collectstatic --noinput

            echo "✅ Деплой завершён успешно!"
