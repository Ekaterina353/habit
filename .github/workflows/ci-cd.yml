name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Flake8
        run: flake8 .
  test:
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: habits
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ENGINE: django.db.backends.postgresql_psycopg2
        DB_NAME: habits
        DB_USER: postgres
        DB_PASSWORD: 12345
        DB_HOST: localhost
        DB_PORT: 5432
        CELERY_RESULT_BACKEND: redis://127.0.0.1:6379/0
        CELERY_BROKER_URL: redis://127.0.0.1:6379/0
      run: python manage.py migrate

    - name: Run tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ENGINE: django.db.backends.postgresql_psycopg2
        DB_NAME: habits
        DB_USER: postgres
        DB_PASSWORD: 12345
        DB_HOST: localhost
        DB_PORT: 5432
        CELERY_RESULT_BACKEND: redis://127.0.0.1:6379/0
        CELERY_BROKER_URL: redis://127.0.0.1:6379/0
      run: python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/feature/ci_cd'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Install and Start Docker
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          # Установка Docker если не установлен
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi
          
          # Запуск Docker daemon
          sudo systemctl start docker
          sudo systemctl enable docker
          
          # Даем время на запуск
          sleep 10
          
          # Проверяем что Docker работает
          docker --version
          sudo systemctl status docker
          EOF

      - name: Set up Venv
        run: | 
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          PROJECT_PATH="/home/${{ secrets.SSH_USER }}/habits_prpject"
          mkdir -p "$PROJECT_PATH"
          cd "$PROJECT_PATH"
          
          if [ ! -d ".venv" ]; then
            python3 -m venv venv
          fi
          sudo apt install python3 python3-pip python3-venv -y
          EOF

      - name: Deploy docker to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          PROJECT_PATH="/home/${{ secrets.SSH_USER }}/habits_prpject"
          mkdir -p "$PROJECT_PATH"
          cd "$PROJECT_PATH"
          
          if [ -d ".git" ]; then
            echo "Updating existing repository..."
            git fetch origin
            git checkout "feature/ci_cd"
            git pull origin "feature/ci_cd"
          else
            echo "Cloning repository..."
            git clone "https://github.com/yuriy0770/habits_prpject.git" .
            git checkout "feature/ci_cd"
          fi
          
          sudo docker compose down -v || true
          sudo docker compose up -d --build
          EOF
